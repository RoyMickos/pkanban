<project name="pkanban" default="hello" basedir=".">
	<description>
		Create a pkanban distribution package. It will be a python package, that embeds
		built javascript files.
	</description>
	<!--
		Common properties
	-->
	<property environment="env"/>
	<!-- BUILD_NUMBER is defined by Jenkins, env.HOME is home directory location in Linux -->
	<property name="build.dir" value="${env.HOME}/tmp/build_${env.BUILD_NUMBER}"/>  
	<property name="build.log.dir" value="${build.dir}/log" />
	<property name="django.test.server" value="localhost:5001" />
	<property name="build.tools.dir" value="etc/buildtools" />
	
	<!-- Helper target to play with ant behaviour -->
	<target name="hello">
		<echo>This is a test</echo>
        <copy todir="etc/django-pkanban/pkanban">
            <fileset dir="pkanban">
                <exclude dir="dev" />
            </fileset>
        </copy>
	</target>

	<target name="init-build">
		<mkdir dir="${build.log.dir}"/>
	</target>
	
	<!-- 
		We need to install dependent libraries to the build environment. For simplicity
		jquery and qunit libraries are stored directly in git as they are minified versions.
		However, dojo source is useful in development so we keep them as tar.gz in etc/libs
		and deploy them to the development environment before use.
		check-dojo-deployment checks whether the dojo source directories exists, and
		deploy-dojo does the actual deployment. 
	-->
	<target name="check-dojo-deployment">
		<condition property="dojo.deployed">
			<and>
				<available file="pkanban/dev/static/src/dojo" type="dir" />
				<available file="pkanban/dev/static/src/dojox" type="dir" />
				<available file="pkanban/dev/static/src/dijit" type="dir" />
				<available file="pkanban/dev/static/src/util" type="dir" />
			</and>
		</condition>
	</target>
	<target name="deploy-dojo" unless="dojo.deployed" depends="check-dojo-deployment">
		<echo>Deploying dojo development files</echo>
		<path id="dojo.archive.files">
			<first>
				<fileset dir="etc/libs" includes="*.gz" />
			</first>
		</path>
		<pathconvert targetos="unix" property="dojo.archive" refid="dojo.archive.files"/>
		<property name="tmpdir" value="tmp" />
		<mkdir dir="${tmpdir}" />
		<exec executable="tar" dir="${tmpdir}" ><!--output="${build.log.dir}/deploy-dojo-tar.log"-->
			<arg value="-zxvf"/>
			<arg value="${dojo.archive}"/>
		</exec>
		<basename property="dojo.revision" file="${dojo.archive}" suffix="tar.gz"/>
		<move todir="pkanban/dev/static/src">
			<fileset dir="${tmpdir}/${dojo.revision}" />
		</move>
		<delete dir="${tmpdir}"/>
	</target>
	
	<!--
		Targets for development environment: run django backend tests using django's framework,
		then run selenium tests through browser. TODO: run qunit front-end unit tests. Running would
		be easy, how about storing the test results?
	-->
	<target name="run-django-backend-tests-devel">
		<echo>Run django back-end tests in development environment</echo>
		<exec executable="python" dir="." output="${build.log.dir}/run-django-backend-tests-devel.log">
			<arg value="manage.py" />
			<arg value="test" />
			<arg value="--liveserver=${django.test.server}" />
			<arg value="pkanban" />
		</exec>
	</target>
	<target name="run-browser-tests-devel" depends="init-build">
		<echo>Run selenium functional tests in development environment</echo>
		<echo>Run qunit javascript unit tests in development environment</echo>
		<!-- using daemons seems to leave processes hanging. using timeout to clear processes away -->
		<parallel timeout="90000">
			<daemons>
				<exec executable="python" dir="." output="${build.log.dir}/run-browser-tests-devel_startdjango.log">
					<arg value="manage.py" />
					<arg value="runserver" />
					<arg value="4000" />
				</exec>
			</daemons>
			<sequential>
				<sleep seconds="20" />
				<exec executable="python" dir="etc/testtools">
					<arg value="browser_tests.py" />
				</exec>
				<exec executable="python" dir="etc/testtools">
					<arg value="qunit_tests.py" />
				</exec>
				<move file="etc/testtools/qunit_result.txt" todir="${build.dir}"/>
				<exec executable="etc/buildtools/stopserver.sh" dir="." />
			</sequential>
		</parallel>
	</target>
	
	<!--
		Compile javascript
		We're using the build.sh from dojo boilerplate
	-->
	<target name="compile-javascript">
		<echo>MODIFYING SOURCE: changing baseUrl in client/src/app/run.js</echo>
		<replaceregexp file="pkanban/dev/static/src/app/run.js"
			           match="^\s*baseUrl:\s*'\.\./dev/static/src'"
			           replace="    baseUrl: '/static/pkanban'"
			           byline="true"/>		
		<exec executable="./build.sh" dir="etc/buildtools" />
		<echo>MODIFYING SOURCE: undoing previous baseUrl change in client/src/app/run.js</echo>
		<replaceregexp file="pkanban/dev/static/src/app/run.js"
			           match="^\s*baseUrl:\s*'/static/pkanban'"
			           replace="    baseUrl: '\.\./dev/static/src'"
			           byline="true"/>		
		<move file="pkanban/static/pkanban/build-report.txt" tofile="${build.dir}/javascript-compile.txt" />
	</target>
	
	<!--
		Create python tarball. 
	-->
	<target name="create-python-distribution">
        <copy todir="etc/django-pkanban/pkanban">
            <fileset dir="pkanban">
                <exclude name="dev/**" />
            </fileset>
        </copy>
        <copy file="README.md" tofile="etc/django-pkanban/README.rst" />
		<exec executable="python" dir="etc/django-pkanban">
			<arg value="setup.py" />
			<arg value="sdist" />
		</exec>
        <delete file="etc/django-pkanban/README.rst" />
        <delete dir="etc/django-pkanban/pkanban"/>
	</target>
	
	<!-- 
		Deploy release using chef + vagrant
	-->
	
</project>

